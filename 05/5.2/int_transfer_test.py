#!/usr/bin/env python

# -*- *************** -*-
# @File  : int_transfer_test.py
# @Description : 函数的参数传递机制
# @Author: mql
# @Time  : 2020/1/14 9:53
# -*- *************** -*-


# Python 的参数值是如何传入函数的呢？这是由 Python 函数的参数传递机制来控制的。
# Python中函数的参数传递机制都是“值传递”。
# 所谓值传递，就是将实际参数值的副本（复制品〉传入函数 ，而参数本身不会受到任何影响。

# 下面程序演示了函数参数传递的效果。

# 值拷贝传值
def swap(a, b):
    a, b = b, a
    print("在swap函数里，a的值是", a, ";b的值是",b)
a = 6
b = 9
swap(a, b)
print("交换结束后，a的值是", a, ";b的值是",b)

# 如果参数本身是－个可变对象（比如列表、字典等），此时虽然 Python采用的也是值传递方式，
# 但其使用值的地址引用。
# 下面程序示范了这种类型的参数传递的效果 。

# 引用传参，（仅拷贝指针，指向的地址、值是一样的）

print()
def swap(dw):
    # 下面代码实现 dw 的 a 、 b 两个元素的值交换
    dw['a'], dw['b'] = dw['b'], dw['a']
    print("在swap()函数里，a元素的值是", dw['a'], ";b元素的值是", dw['b'])
    # 为了更好地证明主程序中的 dw 和 swap（）函数中的 dw 是两个变量，在 swap（）函数的最后一行增加如下代码
    # 把 dw 直接赋值为 None，让它不再指向任何对象
    dw = None
dw = {'a':6, 'b':9}
print("交换结束前，a元素的值是", dw['a'], ";b元素的值是", dw['b'])
swap(dw)
print("交换结束后，a元素的值是", dw['a'], ";b元素的值是", dw['b'])

# 通过上面介绍可以得出如下两个结论。
# 》不管什么类型的参数，在 Python 函数中对参数直接使用“＝” 符号赋值是没用的 ，
#   直接使用“＝”符号赋值并不能改变参数。
# 》如果需要让函数修改某些数据 ，则可以通过把这些数据包装成列表、字典等可变对象，
#   然后把列表、宇典等可变对象作为参数传入函数，在函数中通过列表 、 字典的方法修改它们，
#   这样才能改变这些数据。