# 线程通信
    当线程在系统中运行时，线程的调度具有一定的透明性，通常程序无法准确控制线程的轮换执
行，如果有需要， Python 可通过线程通信来保证线程协调运行。

## 1 使用 Condition 实现线程通信
    假设系统中有两个线程，这两个线程分别代表存款者和取钱者——现在假设系统有一种特殊的
要求 ，即要求存款者和取钱者不断地重复存款、取钱的动作，而且要求每当存款者将钱存入指定账
户后，取钱者就立即取出该笔钱 。 不允许存款者连续两次存钱，也不允许取钱者连续两次取钱 。
    为了实现这种功能，可以借助于 Condition 对象来保持协调。 使用 Condition 可以让那些己经得
到 Lock 对象却无法继续执行的线程释放 Lock 对象， Condition 对象也可以唤醒其他处于等待状态
的线程 。
    将 Condition 对象与 Lock 对象组合使用，可以为每个对象提供多个等待集（ wait-set ）。 因此，
Condition 对象总是需要有对应的 Lock 对象 。 从 Condition 的构造器__init__(self, lock=None)可以看
出，程序在创建 Condition 时可通过 lock 参数传入要绑定的 Lock 对象; 如果不指定 lock 参数，在
创建 Condition 时它会自创建一个与之绑定的 Lock 对象。
    Condition 类提供了如下几个方法 。
    > acquire([timeout])/reIease（）：调用 Condition 关联 的 Lock 的 acquire（）或 release（）方法 。
    > wait([timeout］）：导致当前线程进入 Condition 的等待池等待通知并释放锁，直到其他线程
      调用该 Condition 的 notify()B"x noti句 all（）方法来唤醒该线程 。 在调用该 wait（）方法时可传入
      一个 timeout 参数，指定该线程最多等待多少秒。
    > notify（）：唤醒在该 Condition 等待池中的单个线程并通知它，收到通知的线程将自动调用
      acquire（）方法尝试加锁 。 如果所有线程都在该 Condition 等待池中等待，则会选择唤醒其中
      一个线程，选择是任意性的 。
    > notify_all（）：唤醒在该 Condition 等待池中等待的所有线程并通知它们。

        \Condition\Account.py  and  \Condition\draw_deposit.py

## 2 使用队列 (Queue ）控制线程通信
    在 queue 模块下提供了几个阻塞队列，这些队列主要用于实现线程通信。 在 queue 模块下主要
提供了三个类，分别代表三种队列， 它们的主要区别就在于进队列、出队列的不同。关于这三个队
列类的简单介绍如下 。
    > queue.Queue(maxsize = 0）：代表 FIFO （先进先出）的常规队列， maxsize 可以限制队列的
      大小 。 如果队列的大小达到队列的上限，就会加锁，再次加入元素时就会被阻塞，直到队
      列中的元素被消费 。 如果将 maxsize 设置为 0 或负数，则该队列的大小就是无限制的
    > queue.LifoQueue(maxsize = 0）：代表 LIFO （后进先出）的队列，与 Queue 的 区别就是出队
      列的顺序不同 。
    > PriorityQueue(maxsize = 0）： 代表优先级队列，优先级最小的元素先出队列。

    这三个队列类的属性和方法基本相同， 它们都提供了如下属性和方法 。
    >- Queue.qsize（）： 返回队列的实际大小，也就是该队列中包含几个元素 。
    >- Queue.empty（）：判断队列是否为空 。
    >- Queue.full （）： 判断队列是否己满 。
    >- Queue.put(item, block=True, timeout=None） ：向队列中放入元素。 如果队列己满，且 block
      参数为 True（阻塞），当前线程被阻塞 ，timeout 指定阻塞时间，如果将 timeout 设置为 None,
      则代表一直阻塞， 直到应队列的元素被消费;
      如果队列己满，且 block 参数为 False(不阻塞) ，则直接引发 queue.FULL 异常 。
    >- Queue.put_nowait(item）：向队列中放入元素 ，不阻塞。 相当于在上一个方法中将 block 参数设置为 False 。
    >- Queue.get(item, block=True, timeout=None）：从队列中 取出元素（消费元素 ）。 如果队列己
       满 ， 且 block 参数为 True （阻塞 ）， 当前线程被阻塞 ， timeout 指定阻塞时间，如果将 timeout
       设置为 None，则代表一直阻塞，直到有元素被放入队列中；
       如果队列己空，且 block 参数为 False （不阻塞），则直接引发 queue.EMPTY 异常 。
    >- Queue.get_nowait(item）：从队列中取出元素，不阻塞 。 相 当于在上一个方法中将 block 参数设置为 False 。

    \Queue\Queue_test.py    \Queue\Queue_test2.py

## 3 使用Event控制线程通信
    Event 是一种非常简单的线程通信机制 ： 一个线程发出 一个 Event ， 另 一个线程可通过该 Event
被触发。
    Event 本身管理一个内部旗标， 程序可以通过 Event 的 set（）方法将该旗标设置为 True ，也可以
调用 clear（）方法将该旗标设置为 False . 程序可以调用 wait（）方法来阻塞当前线程 ， 直到 Event 的内
部旗标被设置为 True。
    Event提供了如下方法。
    ~ i s_set（） ： 该方法返回 Event 的内部旗标是否为 True 。
    ~ set（）： 该方法将会把 Event 的内部旗标设置为 True ，并映醒所有处于等待状态的线程 。
    ~ clear（） ： 该方法将 Event 的内部旗标设置为 False，通常接下来会调用 wait（）方法来阻塞当前线程 。
    ~ wait(timeout=None）： 该方法会阻塞当前线程。

    ***提示***
    Event 实际上有类似于 Condition 和旗标的结合体，但 Event 本身并不带 Lock 对象，
    因此，如果要实现线程同步，还需要额外的 Lock 对象。

    \Event\Event_test.py   \Event\Account.py