### 打开文件

    掌握了各种操作目录字符串或目录的函数之后，接下来可以准备读写文件了。 在进行文件读写
之前，首先要打开文件。
    Python 提供了一个内置的 open（）函数，该函数用于打开指定文件。该函数的语法格式如下：
    open(file_name [, access_mode] [, buffering])
    在上面的语法格式中，只有第一个参数是必需的，该参数代表要打开文件的路径。 access_mode 和 bufering 参数都是可选的。
在打开文件之后，就可调用文件对象的属性和方法了。文件对象支持如下常见的属性。
>> file.closed：该属性返回文件是否己经关闭。
>> file.mode：  该属性返回被打开文件的访问模式。
>> file.name：  该属性返回文件的名称。

## 1. 文件打开模式
    open（）函数支持的文件打开模式如表 12.1 所示。

表 12.1 open 函数支持的文件打开模式
模式      意义
r        只读模式
w        写模式
a        追加模式
+        读写模式，可与其他模式结合使用。 比如 r+ 代表读与写式， w+ 也代表读写模式
b        二进制模式，可与其他模式结合使用。 比如 rb 代表二进制只读模式，rb+ 代表二进制读写模式，ab 代表二进制追加模式

## 2. 缓冲
    众所周知，计算机外设（比如硬盘、网络）的 I/O 速度远远低于访问内存的速度，而程序执行
I/O 时要么将内存中的数据写入外设，要么将外设中的数据读取到内存，如果不使用缓冲，就必须
等外设输入或输出一个字节后，内存中的程序才能输出或输入一个字节，这意味着内存中的程序大
部分时间都处于等待状态。
    因此，一般建议打开缓冲。在打开缓冲之后，当程序执行输出时，程序会先将数据输出到缓冲
区中，而不用等待外设同步输出，当程序把所有数据都输出到缓冲区中之后，程序就可以去干其他
事情了，留着缓冲区慢慢同步到外设即可：反过来，当程序执行输入时，程序会先等外设将数据读
入缓冲区中， 而不用等待外设同步输入。
    在使用 open（）函数时，如果其第三个参数是 0 （或 False ），那么 该函数打开的文件就是不带缓
冲的；如果其第三个参数是 1 （或 True ），则该函数打开的文件就是带缓冲的，此时程序执行 I/O
将具有更好的性能。 如果其第三个参数是大于 1 的整数，则该整数用于指定缓冲区的大小（单位是
字节〕；如果其第三个参数为任何负数，则代表使用默认的缓冲区大小。
    在打开文件之后，接下来就可以开始读取文件内容了。