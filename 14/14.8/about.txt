# 线程相关类

## 1. 线程局部变量
    Python 在 threading 模块下提供了 一个 local() 函数，该函数可以返回 一个线程局部变量，通过
使用线程局部变量可以很简捷地隔离多线程访问的竞争资源，从而简化多线程井发访问的编程处理。
    线程局部变量 (Thread Local Variable) 的功用其实非常简单，就是为每一个使用该变量的钱程
都提供一个变量的副本， 使每一个线程都可以独立地改变自己的副本，而不会和其他线程的副本冲
突。 从线程的角度看， 就好像每一个线程都完全拥有该变量一样。

        \thread_local_test.py（示范了线程局部变量的作用）

## 2. 定时器
    Thread 类有一个 Timer 子类，该子类可用于控制指定函数在特定时间内执行一次。

         \Timer_test.py

    需要说明的是， Timer 只能控制函数在指定时间内执行一次，如果要使用 Timer 控制函数多次
重复执行，则需要再执行下一次调度。
    如果程序想取消 Timer 的调度，则可调用 Timer 对象的 cancel() 函数。

        \Timer_test2.py

## 3. 任务调度
    如果需要执行更复杂的任务调度，则可使用 Python 提供的 sched 模块。该模块提供了
sched.scheduler 类，该类代表 一个任务调度器。
    sched.scheduler(timefunc=time.moenotonic, delayfunc=time.sleep）构造器支持两个参数。
    ~ timefunc ： 该参数指定生成时间戳的时间函数，默认使用 time.monotonic 来生成时间戳。
    ~ delayfunc ：该参数指定阻塞程序的函数，默认使用 time.sleep 函数来阻塞程序。

    sched.scheduler 调度器支持如下常用属性和方法。
    ~ scheduler.enterabs(time, priority, action, argument=(), kwargs＝｛｝）：指定在 time 时间点执行
      action 函数 ， argument 和 kwargs 都用于向 action 函数传入参数，其中 argument 使用位置参
      数的形式传入参数； kwargs 使用关键字参数的形式传入参数。该方法返回一个 event，它
      可作为 caneel() 方法的参数用于取消该调度。 priority 参数指定该任务的优先级，当在同一
      个时间点有多个任务需要执行时，优先级高（值越小代表优先级越高）的任务会优先执行。
    ~ scheduler.enter(delay, priority, action, argument=(), kwargs＝｛｝）：该方法与上一个方法基本相
      同，只是 delay 参数用于指定多少秒之后执行 action 任务。
    ~ scheduler.empty（）： 判断当前该调度器的调度队列是否为空。
    ~ scheduler.run(blocking=True）： 运行所有需要调度的任务。如果调用该方法的 blocking 参数
      为 True ， 该方法将会阻塞线程，直到所有被调度的任务都执行完成。
    ~ scheduler.queue ： 该只读属性返回该调度器的调度队列。

        \sched_test.py（示范了使用 sched.scheduler 来执行任务调度）