#   OS 模块的文件和目录函数
    在 OS 模块下也提供了大量操作文件和目录的函数，如果读者需
要查阅有关这些函数的说明，则可访问 https://docs.python.org/3/library/os.html 页面。

## 1 与目录相关的函数
与目录相关的函数如下。
》 os.getcwd（）： 获取当前目录 。
》 os.chdir(path）： 改变当前目录 。
》 os.fchdir(fd）： 通过文件描述利改变当前目录。该函数与上一个函数的功能基本相似，只是该函数以文件描述符作为参数来代表目录。
       os_chdir_test.py
》 os.chroot(path） ： 改变当前进程的根目录 。
》 os.listdir(path）： 返回 path 对应目录下的所有文件和子目录 。
》 os.mkdir(path[, mode］)：创建 path 对应的目录，其中 mode 用于指定该目录的权限。该 mode
   参数代表一个 UNIX 风格的权限 ，比如 Oo777 代表所有者可读／可写／可执行、 组用户 可读／
   可写／可执行 、 其他用户可读／可写／可执行 。
》 os.makedirs(path[, mode］)： 其作用类似于 mkdir（），但该函数的功能更加强大，它可以递归
   创建目录。 比如要创建 abc/xyz/wawa 目录，如果在当前目录下没有 abc 目录 ，那么使用
   mkdir（） 函数就会报锚，而使 用 makedirs（）函数 则会先创建 abc ， 然后在其中创建 xyz 子目录 ，
   最后在 xyz 子目录下创建 wawa 子目录 。
       os_mkdir_test.py
》 os.rmdir(path）：删除 path 对应的空目录。 如果目录非空 ，则抛出 一个 OSError 异常。程序
   可以先用 os.remove（）函数删除文件 。
》 os.removedirs(path）： 递归删除目录。 其功能类似于 rmdir（），但该函数 可以递归删除
   abc/xyz/wawa 目录 ， 它会从 wawa 子目录开始删除，然后删除 xyz 子 目录， 最后删 除 abc目录。
       os_rmdir_test.py
》 os.rename(src, dst）： 重命名文件或目录 ， 将 src 重名为 dst 。
》 os.renarmes(old , new）： 对文件或目录进行递归重命名。其功 能类似于 rename （）， 但该函数可
   以递归重命名 abc/xyz/wawa 目录 ， 它会从 wawa 目录开始重命名，然后重命名 xyz 子目录 ， 最后重命名 abc 目录。
       os_rmdir_test.py

## 2 与权限相关的函数
与权限相关的函数如下。
》 os.access(path, mode）： 检查 path 对应的文件或目录是否具有指定权限。 该函数的第二个参
   数可能是 以下四个状态值的一个或多个值。
   • os.F_OK：判断是否存在。
   • os.R_OK：判断是否可读。
   • os.W_OK：判断是否可写。
   • os.X_OK：判断是否可执行。
        os .access_test.py
》 os.chmod(path, mode）： 更改权限。 其中 mode 参数代表要改变的权限，该参数支持的值可
   以是以下一个或多个值的组合 。
   • stat.S_IXOTH：其他用户有执行权限。
   • stat.S_IWOTH：其他用户有写权限。
   • stat.S_IROTH：其他用户有读权限。
   • stat.S_IRWXO：其他用户有全部权限。
   • stat.S_IXGRP：组用户有执行权限。
   • stat.S_IWGRP：组用户有写权限。
   • stat.S_IRGRP：组用户有读权限。
   • stat.S_IRWXG：组用户有全部权限。
   • stat.S_IXUSR：所有者有执行权限。
   • stat.S_IWUSR：所有者有写权限。
   • stat.S_IRUSR：所有者有读权限。
   • stat.S_IRWXU：所有者有全部权限。
   • stat.S_IREAD：Windows将该文件设为只读的。
   • stat.S_IWRITE：Windows将该文件设为可写的。
        os.chmod_test.py
》 os.chown(path, uid, gid)： 更改文件的所有者。 其中 uid 代表用户 id, gid 代表组 id。该命令主要在 UNIX 文件系统下有效 。
》 os.fchrnod(fd, mode）： 改变一个文件的访问权限，该文件由文件描述符 fd 指定。该函数的功能与 os.chmod（）函数的功能相似，只是该函数使用 fd 代表文件。
》 os.fchown(fd, uid, gid）：改变文件的所有者， 该文件由文件描述符fd指定。该函数的功能与 os.chown（）函数的功能相似，只是该函数使用 fd 代表文件 。

## 3 与文件访问相关的函数
与文件访 问相关 的函数如下。
》 os.open(file, flags[, mode］）： 打开一个文件，并且设置打开选项， mode 参数是可选的。该函
   数返回文件描述符。其中 flags 代表打开文件的旗标，它支持如下一个或多个选项 。
   • os.O_RDONLY：以只读的方式打开。
   • os.O_WRONLY ：以只 写的方式打开 。
   • os.O_RDWR：以读写的方式打开。
   • os.O_NONBLOCK：打开时不阻塞。
   • os.O_APPEND：以追加的方式打开 。
   • os.O_CREAT ：创建井打开一个新文件 。
   • os.O_TRUNC：打开一个文件并截断它的长度为 0 （必须有写权限〉 。
   • os.O_EXCL：在创建文件时，如果指定的文件存在 ，则返回错误 。
   • os.O_SHLOCK：自动获取共享锁。
   • os.O_EXLOCK：在｜动获取独立锁。
   • os.O_DIRECT ：消除或减少缓存效果。
   • os.O_FSYNC ：同步写入。
   • os.O_NOFOLLOW ：不追踪软链接。
》 os.read(fd, n） ： 从文件描述符 f d中读取最多 n 个字节，返回读到的字节串 。 如果文件描述
   符副对应的文件己到达结尾，则返回一个空字节串。
》 os.write(fd, str）：将字节串写入文件描述符 fd 中，返回实际写入的字节串长度。
》 os.close(fd）： 关闭文件描述符 fd。
》 os.lseek（fd， pos, how）： 该函数同样用于移动文件指针。 其中 how 参数指定从哪里开始移动，
   如果将 how 设为 0 或 SEEK_SET，则表明从文件开头开始移动；如果将 how 设为 1 或
   SEEK_CUR，则表明从文件指针当前位置开始移动：如果将 how 设为 2 或 SEEK_END,
   则表明从文件结束处开始移动。

   上面几个函数同样可用于执行文件的读写 ， 程序通常会先通过 os.open（）打开文件，然后调用
os.read （）、 os.write（）来读写文件，当操作完成后通过 os.close（）关闭文件 。
        os_readwrite_test.py （示范了使用上面的函数来读写文件。）

》 os.fdopen(fd[, mode[, bufsize］］）：通过文件描述符 fd 打开文件，并返回对应的文件对象。
》 os.closerange(fd_low, fd_high）：关闭从 fd_low （包含）到 fd_high （不包含）范围的所有文件描述符。
》 os.dup(fd）：复制文件描述符。
》 os.dup2(fd，fd2）：将一个文件描述符 fd 复制到另 一个文件描述符 fd2 中 。
》 os.ftruncate（fd, length ）：将 fd 对应的文件截断到 length 长度，因此此处传入的 length 参数不应该超过文件大小。
》 os.remove(path)：删除 path 对应的文件。如果 path 是一个文件夹，则抛出 OSError 错误。如果要删除目录，则使用 os.rmdir()。
》 os.link(src, dst）：创建从 src 到 dst 的硬链接 。 硬链接是 UNIX 系统 的概念 ，如果在 Windows 系统中就是复制目标文件 。
》 os.symlink(src, dst）：创建从 src 到 dst 的符号链接，对应于 Windows 的快捷方式。
   由于Windows权限的缘故，因此必须以管理员身份执行 os.symlink()函数来创建快捷方式。
        os_link_test.py （示范了在 Windows 系统中使用 os.symlink(src, dst）函数来创建快捷方式。）