封装（ Encapsulation ）是面向对象的三大特征之一（另外两个是继承和多态） ，
它指的是将对象的状态信息隐藏在对象内部，不允许外部程序直接访问对象内部信息，
而是通过该类所提供的方法来实现对内部信息的操作和访问 。

封装是面向对象编程语言对客观世界的模拟，在客观世界里，对象的状态信息都被隐藏在对象
内部 ，外界无法直接操作和修改。对一个类或对象实现良好的封装，可以达到以下目的 。
〉隐藏类的实现细节。
〉让使用者只能通过事先预定的方法来访问数据，从而可以在该方法里加入控制逻辑，限制对属性的不合理访问 。
〉可进行数据检查，从而有利于保证对象信息的完整性。
〉便于修改，提高代码的可维护性。

为了实现良好的封装，需要从两个方面来考虑 。
》将对象的属性和实现细节隐藏起来，不允许外部直接访问 。
〉把方法暴露 出来，让方法来控制对这些属性进行安全的访问和操作。

因此，实际上封装有两个方面的含义：把该隐藏的隐藏起来，把该暴露的暴露出来 。

Python 并没有提供类似于其他语言的 private 等修饰符，
因此 Python 并不能真正支持隐藏。
为了隐藏类中的成员，Python 玩了一个小技巧：
只要将 Python 类的成员命名为以双下画线开头的，Python 就会把它们隐藏起来。

总结： Python 并没有提供真正的隐藏机制，所以 Python 类定义的所有成员默认都是公开的；
如果程序希望将 Python 类中的某些成员隐藏起来，那么只要让该成员的名字以双下画线开头即可。
即使通过这种机制实现了隐藏，其实也依然司以绕过去。