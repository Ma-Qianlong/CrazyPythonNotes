
### 读取文件
 Python 既可使用 文件对象的方法来读取文件， 也可使用 其他模块的函数来读取文件。

## 1 按字节或字符读取
 文件对象提供了 read（）方法来按字节或字符读取文件内容，到底是读取宇节还是字符，则取决
于是否使用了 b 模式 ，如果使用了 b 模式，则每次读取一个字节；如果没有使用 b 模式，则每次读
取一个字符。在调用该方法时可传入一个整数作为参数，用于指定最多读取多少个字节或宇符。
 当程序读写完文件之后，推荐立即调用 close（）方法来关闭文件，这样可以避免资源泄露。

## 2 按行读取
 如果程序要读取行，通常只能用文本方式来读取一一道理很简单，只有文本文件才有行的概念，
二进制文件没有所谓行的概念 。
文件对象提供了如下两个方法来读取行 。
>- readline([n])： 读取一行内容 。 如果指定了参数 n ，则只读取此行内的 n 个字符 。
>- readlines() ： 读取文件内所有行 。

## 3 使用 fileinput 读取多个输入流
 fileinput 模块提供了如下函数可以把多个输入流合并在 一起 。
 >>fileinput.input（files=None, inplace=False, backup='', bufsize=O, mode＝'r', openhook=None）：该
 函数中的 files 参数用于指定多个文件输入流。 该函数返回一个 Filelnput 对象 。
 当程序使用上面函数创建了 Filelnput 对象之后，即可通过 for 循环来遍历文件的每一行。此外，
fileinput 还提供了如下全局函数来判断正在读取的文件信息 。
 >> fileinput.filename（）： 返回正在读取的文件的文件名 。
 >> fileinput.fileno（）：返回当前文件的文件描述符 （ file descriptor ），该文件描述符是一个整数。
 >> fileinput.filelineno（）：返回当前读取的行在其文件中的行号 。
 >> fileinput.isfirstline（）： 返回当前读取的行在其文件中是否为第一行。
 >> fileinput.isstdin（）：返回最后一行是否从 sys.stdin 读取 。 程序可以使用"-"代表从 sys.stdn读取。
 >> fileinput.nextfile（）： 关闭当前文件，开始读取下一个文件。
 >> fileinput.close（）： 关闭 FileInput 对象。
 通过上面的介绍不难发现， fileinput 也存在一个缺陷：在创建 Filelnput 对象时不能指定字符集，
因此它所读取的文件的字符集必须与操作系统默认的字符集保持一致 。当然，如果文本文件的内容是纯英文 ，则不存在字符集的问题。

## 4 文件迭代器
    实际上，文件对象本身就是可遍历的（就像一个序列一样），因此，程序完全可以使用 for 循
环来遍历文件内容。
    for_file.py、 for_stdin.py

## 5 管道输入
   从上面的示例看到，系统标准输入 sys.stdin 也是一个类文件对象 ，因此， Python 程序可以通
过 sys.stdin 来读取键盘输入 。 但在某些时候，Python 程序希望读取的输入不是来自用户，而是来
自某个命令，此时就需要使用管道输入了 。
    管道的作用在于：将前一个命令的输出，当成下一个命令的输入。不管是 UNIX 系统（包括
Mac OS X ）还是 Windows 系统，它们都支持管道输入 。管道输入的语法如下：
    cmd1 | cmd2 | cmd3 ...
    上面语法的作用是： cmd1 命令的输出，将会传给 cmd2 命令作为输入； cmd2 命令 的输入， 又
会传给 cmd3 命令作为输出。
    pipein_test.py

## 6 使用 with 语句
    在前面的程序中，我们都采用了程序主动关闭文件的方式 。 实际上， Python 提供了 with 语句来
管理资源关闭。比如可以把打开的文件放在 with 语句中，这样 with i吾句就会帮我们自动关闭文件 。
    with 语句的语法格式如下：
    with context expression [as target(s)]:
        with 代码块
    在上面的语法格式中， context_expression 用于创建可自动关闭的资源。

    那么，with 语句的实现原理是什么？其实很简单，使用 with 语句管理的资源必须是一个实现
上下文管理协议（context manage protocol） 的类，这个类的对象可被称为上下文管理器 。 要实现上
下文管理协议，必须实现如下两个方法 。
    >> context_manager.__enter__()： 进入上下文管理器自动调用的方法。 该方法会在 with 代码块
    执行之前执行 。如果 with 语句有 as 子句，那么该方法的返回值会被赋值给 as 子句后的变
    量 ： 该方法可以返回多个值，因此，在 as 子句后面也可以指定多个变量（多个变量必须由
    “（）”括起来组成元组） 。
    >> context_manager.__exit__()（exc_type, exc_value, exc_traceback）：退出上下文管理器自动调用
    的方法。该方法会在 with 代码块执行之后执行 。 如果 with 代码块成功执行结束，程序自
    动调用该方法 ，调用该方法的三个参数都为 None： 如果 with 代码块因为异常而中止，程
    序也自动调用该方法， 使用 sys.exc_info 得到的异常信息将作为调用该方法的参数。
    通过上面的介绍不难发现，只要 一个类实现了 __enter__()和__exit__(exc type, exc value,
exc_traceback）方法，程序就可以使用 with 语句来管理它；通过__exit__（）方法的参数，即可判断出
with 代码块执行时是否遇到了异常 。
    换而言之，上面程序所用 的文件对象、 FileInput 对象，其实都实现了这两个方法 ， 因此它们都
可以接受 with 语句的管理 。
    with_test1.py
    with_test2.py
    with_theory.py

## 7 使用 linecache 随机读取指定行
    linecache 模块允许从 Python 源文件中随机读取指定行，并在内部使用 缓存优化存储。 由于该
模块主要被设计成读取 Python 源文件，因此它会用 UTF-8 字符集来读取文本文件。 实际上，使用
linecache 模块也可以读取其他文件，只要该文件使用了 UTF-8 字符集存储。
    linecache 模块包含以下常用函数 。
    >> linecache.getline(filename, lineno, module_globals=None）：读取指定模块中指定文件的指定行。 其中 filename 指定文件名， lineno 指定行号。
    >> linecache.clearcache（）：清空缓存。
    >> linecache.checkcache(filename=None）：检查缓存是否有效。如果没有指定 filename 参数，则默认检查所有缓存的数据。