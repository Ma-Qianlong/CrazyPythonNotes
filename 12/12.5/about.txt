
### 读取文件
 Python 既可使用 文件对象的方法来读取文件， 也可使用 其他模块的函数来读取文件。

## 1 按字节或字符读取
 文件对象提供了 read（）方法来按字节或字符读取文件内容，到底是读取宇节还是字符，则取决
于是否使用了 b 模式 ，如果使用了 b 模式，则每次读取一个字节；如果没有使用 b 模式，则每次读
取一个字符。在调用该方法时可传入一个整数作为参数，用于指定最多读取多少个字节或宇符。
 当程序读写完文件之后，推荐立即调用 close（）方法来关闭文件，这样可以避免资源泄露。

## 2 按行读取
 如果程序要读取行，通常只能用文本方式来读取一一道理很简单，只有文本文件才有行的概念，
二进制文件没有所谓行的概念 。
文件对象提供了如下两个方法来读取行 。
>- readline([n])： 读取一行内容 。 如果指定了参数 n ，则只读取此行内的 n 个字符 。
>- readlines() ： 读取文件内所有行 。

## 3 使用 fileinput 读取多个输入流
 fileinput 模块提供了如下函数可以把多个输入流合并在 一起 。
 >>fileinput.input（files=None, inplace=False, backup='', bufsize=O, mode＝'r', openhook=None）：该
 函数中的 files 参数用于指定多个文件输入流。 该函数返回一个 Filelnput 对象 。
 当程序使用上面函数创建了 Filelnput 对象之后，即可通过 for 循环来遍历文件的每一行。此外，
fileinput 还提供了如下全局函数来判断正在读取的文件信息 。
 >> fileinput.filename（）： 返回正在读取的文件的文件名 。
 >> fileinput.fileno（）：返回当前文件的文件描述符 （ file descriptor ），该文件描述符是一个整数。
 >> fileinput.filelineno（）：返回当前读取的行在其文件中的行号 。
 >> fileinput.isfirstline（）： 返回当前读取的行在其文件中是否为第一行。
 >> fileinput.isstdin（）：返回最后一行是否从 sys.stdin 读取 。 程序可以使用"-"代表从 sys.stdn读取。
 >> fileinput.nextfile（）： 关闭当前文件，开始读取下一个文件。
 >> fileinput.close（）： 关闭 FileInput 对象。
 通过上面的介绍不难发现， fileinput 也存在一个缺陷：在创建 Filelnput 对象时不能指定字符集，
因此它所读取的文件的字符集必须与操作系统默认的字符集保持一致 。当然，如果文本文件的内容是纯英文 ，则不存在字符集的问题。

## 4 文件迭代器
    实际上，文件对象本身就是可遍历的（就像一个序列一样），因此，程序完全可以使用 for 循
环来遍历文件内容。

## 5 管道输入