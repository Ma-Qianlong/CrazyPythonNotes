# 使用 pathlib 模块操作目录

pathlib 模块提供了一组面向对象的类，这些类可代表各种操作系统上的路径，程序可通过这些类操作路径。

>> PurePath ：代表并不访 问 实际文件系统的“纯路径” 。 简单来说， PurePath 只 是负责对路径
字符串执行操作 ， 至于该字符串是否对应实际的路径，它并不关心 。 PurePath 有两个子类，
即 PurePosixPath 和 PureWindowsPath ，分别代表 UNIX 风格的路径（包括 Mac OS X ）和
Windows 风格的路径。
>> Path：代表访 问实际文件系统的“真正路径 ” 。 Path 对象司用于判断对应的文件是否存在、
是否为文件 、 是否为目录等。 Path 同样有两个子类，即 PosixPath 和 WindowsPath 。

1. PurePath 的基本功能
    程序可使用 PurePath 或它的两个子类来创建 PurePath 对象，如果在 UNIX 或 Mac OS X 系统上
使用 PurePath 创建对象，程序实际返回 PurePosixPath 对象：如果在 Windows 系统上使用 PurePath
创建对象，程序实际返回 PureWindowsPath 对象。
    如果程序明确希望创建 PurePosixPath 或 PureWindowsPath 对象，则应该直接使用 PurePath 的
子类。
    程序在创建 PurePath 和 Path 时 ，既可传入单个路径字符串，也可传入多个路径字符串， PurePath
会将它们拼接成一个字衍串。
    如果在创建 PurePath 时不传入任何参数，系统默认创建代表当前路径的 PurePath ，相当于传入
点号（代表当前路径）作为参数 。
    如果在创建 PurePath 时传入的参数包含多个根路径，则只有最后一个根路径及后面的子路径
生效。
    需要说明的是，在 Windows 风格的路径中，只有盘符才能算根路径，仅有斜杠是不算的 。
    如果在创建 PurePath 时传入的路径字相串中包含多余的来｜杠和点号，系统会直接忽略它们 。
但不会忽略两点，因为两点在路径中有实际意义（两点代表上一级路径〉。例如如下代码（程序清
单同上）。
    PurePath 对象支持各种 比较运算符，它们 既可 比较是否相等 ，也可 比较大小————实际上就是比
较它们的路径字符串 。
    PurePath 对象支持斜杠（ ／）作为运算符，该运算符 的作用 是将多个路径连接起来 。 不管是 UNIX
风格的路径 ， 还是 Windows 风格的路径，都是使用斜杠作为连接运算符的

2. PurePath 的属性和方法
    PurePath 提供了不少属性和方法，这些属性和方法主要还是用于操作路径宇符串 。 由于 P urePath
并不真正执行底层的文件操作，也不理会路径字符串在底层是否有对应的路径，因此这些操作有点
类似于字符串方法 。
    >> PurePath .p arts ：该属性返回路径字符串中所包含的各部分。
    >> PurePath.drive ： 该属性返回路径字符串中的驱动器盘符。
    >> PurePath.root ： 该属性返回路径字符串中的根路径 。
    >> PurePath.anchor ： 该属性返回路径字符串中的盘符平｜］根路径。
    >> PurePath. parents : ·i衷属性返回当前路径 的全部父路径。
    >> Pur ath .par巳nt ： 该属性返回当前路径 的上 一级路径，相当于 pare nt s [O］的返回值 。
    >> PurePath.name ： 该属性返回当前路径中的文件名。
    >> PurePath.suffixes ： 该属性返回当前路径中的文件所有后缀名。
    >> PurePath.suffix ： 该属性返回当前路径中的文件后缀名。相当于 suffixes 属性返回的列表的最后一个元素。
    >> PurePath.stem ： 该属性返回当前路径中的主文件名
    >> PurePath.as_posix（） ： 将当前路径转换成 UNIX 风格的路径 。
    >> PurePath.as_uri （）： 将 当前路径转换成 U阻 。 只有绝对路径才能转换，否则将会引发 Va lueEn-or 。
    >> PurePath.is absolute（） ： 判断当前路径是否为绝对路径 。
    >> PurePath.joinpath( *other）： 将多个路径庄接在一起，作用类似于前面介绍的斜杠运算符 。
    >> PurePath.match(pa忧ern） ： 判断当前路径是否匹配指定通配符。
    >> PurePath.relative to(*other）： 获取主｜前路径 1二j:i 去除基准路径之后的结果 。
    >> PurePath.with nam巳（name）： 将当前路径中的文件名替换成新文件名 。 如果当前路径中没有文件名，则会引发 YalueEnor 。
    >> PurePath.with_suffix(suffix）： 将当前路径中的文件后缀名替换成新的后缀名 。 如果当前路径中没有后缀名，则会添加新的后缀名 。

3. Path 的功能和用法
    Path 是 PurePath 的子类 ，它 除支持 Pure Path 的 各种操作、属性和方法之外，还会真正访问底
层的文件系统，包括判断 Path 对应的路径是否存在 ， 获取 Path 对应路径的各种属性（如：是否只读、
是文件还是文件夹等） ， 甚至可以对文件进行读写。
    Path 同样提供了两个子类 ： P os i xPath 和 WindowsPath ， 其中前者代表 UNIX 风格的路径：后
者代表 Windows 风格的路径 。
    Path 对 象包含了大量 is_xxx（）方法，用于判断该 Path 对应的路径是否为 xxx 。 Path 包含 一个
exists （）方法，用于判断该 Path 对应的目录是否存在。
    Path 还包含一个很常用的 iterdir（）方法，该方法可返回 Path 对应目录下的所有子目录和文件 。
此外， Path 还包含一个 glob（）方法，用于获取 Path 对应目录及其子目录下匹配指定模式的所有文件。
借助于 glob（）方法，可以非常方便地查找指定文件 。
    此外， Path 还提供了 read_bytes（）和 read_text(encoding=None, errors=None）方法，分别用于读取
该 Path 对应文件的字节数据（二进制数据）和 文本数据 ：也提供了 write_bytes(data） 和
Path.wirte＿text(data , encoding=None, errors=None ）方法来输出字节数据（二进制数据〉和文本数据。